// A aplica√ß√£o faz a valida√ß√£o da entrada e avisa o usu√°rio para informar corretamente 
// Ap√¥s algumas pesquisas encontrei o readline para leitura dos dados, ele precisa ser criado dessa forma para funcionar
// Utiliza√ß√£o de recursividade para leitura e valida√ß√£o dos dados, considerando fechar sempre o readline para poupar m√©moria
// N√£o foi utilizado o paradigma de orienta√ß√£o a objetos

// importando uma biblioteca como no python
const readline = require('readline');

// interface para leitura de dados
function readCreateInterface(){
    return readline.createInterface({
        input: process.stdin,
        output: process.stdout
    })
}

// verifica tamanho max do nome de 100 caracteres
// verifica se realmente foi digitado um n√∫mero inteiro
// fun√ß√£o recursiva para ler a entrada e validar
function readHero(rl){
    rl.question("Digite o nome do her√≥i: ", (name) => {
        if(name.length < 100 && name &&  name.trim().length !== 0)
        {
            nameHero = name;
            // chama a pr√≥xima fun√ß√£o de leitura 
            readXpHero(rl);
        }else{
            console.log("ALERTA!‚ö†Ô∏è  Nome do her√≥i precisa ter menos de 100 caracteres e n√£o ser vazio.")
            // recursividade
            readHero(rl);
        }
        
    })
};

function readXpHero (rl){
    rl.question("Digite a quantidade de experi√™ncia do her√≥i: ", (heroXp) =>{
        
        // precisa converter pois o JavaScript sempre l√™ como string
        let numberXP = parseInt(heroXp);

        if(typeof numberXP === 'number' && numberXP)
        {
            // √∫ltimo dado de leitura fecha o readline e chama a fun√ß√£o para ler outro her√≥i
            xpHero = numberXP;
            exit();
            rl.close();
            read();
        } else {
            // recursividade
            console.log("ALERTA!‚ö†Ô∏è  A experi√™ncia do her√≥i preicisa ser um n√∫mero e n√£o ser vazio.")
            readXpHero(rl);
        }
    })
};

// LEITURA DE DADOS
// chamando o m√™todo do readline para leitura de dados
// sempre ao iniciar um processo de leitura cria uma interface, pois ao finalizar a leitura o readline(rl) fecha, como na linha 43
// e esse readline(rl) √© passado para o escopo de todas as fun√ß√µes de leitura como par√¢metro
function read(){
    const rlAgain = readCreateInterface();

    rlAgain.question("Deseja digitar outro her√≥i (S)sim (N)n√£o? ", (resposta) => {
        
        if(resposta.toLowerCase() === "s"){
            readHero(rlAgain);
        } else if(resposta.toLowerCase() === "n"){
            console.log("Nos vemos em breve üòâ!")
            rlAgain.close();
        } else {
            console.log("ALERTA!‚ö†Ô∏è  Digite uma das duas op√ß√µes (S)sim (N)n√£o.")
            rlAgain.close();
            read();
        }
    })
}

// fun√ß√£o para exibir a sa√≠da correta
function exit(){
    if(xpHero < 1000){
        console.log("O Her√≥i de nome " + nameHero + " est√° no n√≠vel de FERRO")
    } else if(xpHero >= 1001 && xpHero <= 2000){
        console.log("O Her√≥i de nome " + nameHero + " est√° no n√≠vel de BRONZE")
    } else if (xpHero >= 2001 && xpHero <= 5000){
        console.log("O Her√≥i de nome " + nameHero + " est√° no n√≠vel de PRATA")
    } else if (xpHero >= 5001 && xpHero <= 7000){
        console.log("O Her√≥i de nome " + nameHero + " est√° no n√≠vel de OURO")
    } else if (xpHero >= 7001 && xpHero <= 8000){
        console.log("O Her√≥i de nome " + nameHero + " est√° no n√≠vel de PLATINA")
    } else if (xpHero >= 8001 && xpHero <= 9000){
        console.log("O Her√≥i de nome " + nameHero + " est√° no n√≠vel de ASCENDENTE")
    } else if (xpHero >= 9001 && xpHero <= 10000) {
        console.log("O Her√≥i de nome " + nameHero + " est√° no n√≠vel de IMORTAL")
    } else {
        console.log("O Her√≥i de nome " + nameHero + " est√° no n√≠vel de RADIANTE")
    }
}

// variav√°veis globais para serem usadas em qualquer escopo
let nameHero;
let xpHero;

read();



